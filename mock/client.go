// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio-labs/conduit-connector-notion (interfaces: Client)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	client "github.com/conduitio-labs/conduit-connector-notion/client"
	gomock "github.com/golang/mock/gomock"
)

// Client is a mock of Client interface.
type Client struct {
	ctrl     *gomock.Controller
	recorder *ClientMockRecorder
}

// ClientMockRecorder is the mock recorder for Client.
type ClientMockRecorder struct {
	mock *Client
}

// NewClient creates a new mock instance.
func NewClient(ctrl *gomock.Controller) *Client {
	mock := &Client{ctrl: ctrl}
	mock.recorder = &ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Client) EXPECT() *ClientMockRecorder {
	return m.recorder
}

// GetPage mocks base method.
func (m *Client) GetPage(arg0 context.Context, arg1 string) (client.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(client.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *ClientMockRecorder) GetPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*Client)(nil).GetPage), arg0, arg1)
}

// GetPages mocks base method.
func (m *Client) GetPages(arg0 context.Context, arg1 time.Time) ([]client.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPages", arg0, arg1)
	ret0, _ := ret[0].([]client.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPages indicates an expected call of GetPages.
func (mr *ClientMockRecorder) GetPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPages", reflect.TypeOf((*Client)(nil).GetPages), arg0, arg1)
}

// Init mocks base method.
func (m *Client) Init(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0)
}

// Init indicates an expected call of Init.
func (mr *ClientMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*Client)(nil).Init), arg0)
}
