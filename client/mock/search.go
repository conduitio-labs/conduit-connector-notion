// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio-labs/notionapi (interfaces: SearchService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	notionapi "github.com/conduitio-labs/notionapi"
	gomock "github.com/golang/mock/gomock"
)

// SearchService is a mock of SearchService interface.
type SearchService struct {
	ctrl     *gomock.Controller
	recorder *SearchServiceMockRecorder
}

// SearchServiceMockRecorder is the mock recorder for SearchService.
type SearchServiceMockRecorder struct {
	mock *SearchService
}

// NewSearchService creates a new mock instance.
func NewSearchService(ctrl *gomock.Controller) *SearchService {
	mock := &SearchService{ctrl: ctrl}
	mock.recorder = &SearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SearchService) EXPECT() *SearchServiceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *SearchService) Do(arg0 context.Context, arg1 *notionapi.SearchRequest) (*notionapi.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*notionapi.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *SearchServiceMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*SearchService)(nil).Do), arg0, arg1)
}
